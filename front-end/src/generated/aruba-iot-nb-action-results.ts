// @generated by protobuf-ts 2.9.3 with parameter long_type_string
// @generated from protobuf file "aruba-iot-nb-action-results.proto" (package "aruba_telemetry", syntax proto2)
// tslint:disable
//
//  (C) Copyright [2018-2022] Hewlett Packard Enterprise Development LP
//  Note: File corresponds to AOS 8.10.x.x release
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BleBondingKey } from "./aruba-iot-types";
import { ActionType } from "./aruba-iot-types";
/**
 * @generated from protobuf message aruba_telemetry.ActionResult
 */
export interface ActionResult {
    /**
     * Identifier for the action. This is the same Identifer that was used in the action request.
     * the originator of the action will need the ID to correlate this result with the outstanding request
     *
     * @generated from protobuf field: optional string actionId = 1;
     */
    actionId?: string;
    /**
     * Type of action that was executed
     *
     * @generated from protobuf field: optional aruba_telemetry.ActionType type = 2;
     */
    type?: ActionType;
    /**
     * Refers to the MAC address of the end device. Typically a 6 byte BLE MAC or 8 byte Zigbee MAC
     *
     * @generated from protobuf field: optional bytes deviceMac = 3;
     */
    deviceMac?: Uint8Array;
    /**
     * Completion Status of the action
     *
     * @generated from protobuf field: optional aruba_telemetry.ActionStatus status = 4;
     */
    status?: ActionStatus;
    /**
     * Optional additional freeform information
     *
     * @generated from protobuf field: optional string statusString = 5;
     */
    statusString?: string;
    /**
     * Bonding key is present when devices are bonded together
     *
     * @generated from protobuf field: optional aruba_telemetry.BleBondingKey bondingKey = 6;
     */
    bondingKey?: BleBondingKey;
    /**
     * APB mac address
     *
     * @generated from protobuf field: optional bytes apbMac = 7;
     */
    apbMac?: Uint8Array;
}
/**
 * Values correspond to the different action results/statuses
 * as part of the BLE SB API interactions
 *
 * @generated from protobuf enum aruba_telemetry.ActionStatus
 */
export enum ActionStatus {
    /**
     * @generated from protobuf enum value: failureGeneric = 0;
     */
    failureGeneric = 0,
    /**
     * @generated from protobuf enum value: success = 1;
     */
    success = 1,
    /**
     * @generated from protobuf enum value: deviceNotFound = 2;
     */
    deviceNotFound = 2,
    /**
     * @generated from protobuf enum value: apNotFound = 3;
     */
    apNotFound = 3,
    /**
     * @generated from protobuf enum value: actionTimeout = 4;
     */
    actionTimeout = 4,
    /**
     * @generated from protobuf enum value: connectionAborted = 5;
     */
    connectionAborted = 5,
    /**
     * @generated from protobuf enum value: authenticationFailed = 6;
     */
    authenticationFailed = 6,
    /**
     * @generated from protobuf enum value: notConnected = 7;
     */
    notConnected = 7,
    /**
     * @generated from protobuf enum value: previousActionFailed = 8;
     */
    previousActionFailed = 8,
    /**
     * @generated from protobuf enum value: alreadyConnected = 9;
     */
    alreadyConnected = 9,
    /**
     * @generated from protobuf enum value: noMoreConnectionSlots = 10;
     */
    noMoreConnectionSlots = 10,
    /**
     * @generated from protobuf enum value: decodingFailed = 11;
     */
    decodingFailed = 11,
    /**
     * @generated from protobuf enum value: characteristicNotFound = 12;
     */
    characteristicNotFound = 12,
    /**
     * @generated from protobuf enum value: invalidRequest = 13;
     */
    invalidRequest = 13,
    /**
     * @generated from protobuf enum value: gattError = 14;
     */
    gattError = 14,
    /**
     * @generated from protobuf enum value: encryptionFailed = 15;
     */
    encryptionFailed = 15
}
// @generated message type with reflection information, may provide speed optimized methods
class ActionResult$Type extends MessageType<ActionResult> {
    constructor() {
        super("aruba_telemetry.ActionResult", [
            { no: 1, name: "actionId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", opt: true, T: () => ["aruba_telemetry.ActionType", ActionType] },
            { no: 3, name: "deviceMac", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "status", kind: "enum", opt: true, T: () => ["aruba_telemetry.ActionStatus", ActionStatus] },
            { no: 5, name: "statusString", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "bondingKey", kind: "message", T: () => BleBondingKey },
            { no: 7, name: "apbMac", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ActionResult>): ActionResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ActionResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionResult): ActionResult {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string actionId */ 1:
                    message.actionId = reader.string();
                    break;
                case /* optional aruba_telemetry.ActionType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional bytes deviceMac */ 3:
                    message.deviceMac = reader.bytes();
                    break;
                case /* optional aruba_telemetry.ActionStatus status */ 4:
                    message.status = reader.int32();
                    break;
                case /* optional string statusString */ 5:
                    message.statusString = reader.string();
                    break;
                case /* optional aruba_telemetry.BleBondingKey bondingKey */ 6:
                    message.bondingKey = BleBondingKey.internalBinaryRead(reader, reader.uint32(), options, message.bondingKey);
                    break;
                case /* optional bytes apbMac */ 7:
                    message.apbMac = reader.bytes();
                    break;
                default:
                    // eslint-disable-next-line no-case-declarations
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    // eslint-disable-next-line no-case-declarations
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string actionId = 1; */
        if (message.actionId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.actionId);
        /* optional aruba_telemetry.ActionType type = 2; */
        if (message.type !== undefined)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* optional bytes deviceMac = 3; */
        if (message.deviceMac !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.deviceMac);
        /* optional aruba_telemetry.ActionStatus status = 4; */
        if (message.status !== undefined)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* optional string statusString = 5; */
        if (message.statusString !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.statusString);
        /* optional aruba_telemetry.BleBondingKey bondingKey = 6; */
        if (message.bondingKey)
            BleBondingKey.internalBinaryWrite(message.bondingKey, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional bytes apbMac = 7; */
        if (message.apbMac !== undefined)
            writer.tag(7, WireType.LengthDelimited).bytes(message.apbMac);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message aruba_telemetry.ActionResult
 */
export const ActionResult = new ActionResult$Type();
